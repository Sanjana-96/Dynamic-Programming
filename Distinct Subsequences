Q. Given two strings s and t, return the number of distinct subsequences of s which equals t.
The test cases are generated so that the answer fits on a 32-bit signed integer.
Example 1:
Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from s.
rabbbit
rabbbit
rabbbit
Example 2:
Input: s = "babgbag", t = "bag"
Output: 5
Explanation:
As shown below, there are 5 ways you can generate "bag" from s.
babgbag
babgbag
babgbag
babgbag
babgbag
Constraints:
1 <= s.length, t.length <= 1000
s and t consist of English letters.


class Solution {
public:
    int numDistinct(string s, string t) {
        int n=s.size();
        int m=t.size();
        vector<double> prev(m+1,0);
       prev[0]=1;
        for(int i=1;i<=n;i++){
            vector<double>cur(m+1,0);
            cur[0]=1;
            for(int j=m;j>=1;j--){
                if(s[i-1]==t[j-1]) cur[j]=prev[j-1]+prev[j];
                else cur[j]=prev[j];
            }
            prev=cur;
        }
        return (int)prev[m];
    }
};
