Q. Given a string s. In one step you can insert any character at any index of the string.
Return the minimum number of steps to make s palindrome.
A Palindrome String is one that reads the same backward as well as forward.

Example 1:
Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we do not need any insertions.
Example 2:
Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".
Example 3:
Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".
Constraints:
1 <= s.length <= 500
s consists of lowercase English letters.



class Solution {
    private:
      int fun(string s,string t){
        int n=s.size();
        int m=t.size();
        vector<int> prev(m+1,0);
        vector<int> cur(m+1,0);
         for(int j=0;j<=n;j++) prev[j]=0;
         for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]) cur[j]=1+prev[j-1];
                else cur[j]=max(prev[j],cur[j-1]);
               
            }
            prev=cur;
         }
         return prev[m];
      }
public:
    int minInsertions(string s) {
        int n=s.size();
        string t=s;
        reverse(s.begin(),s.end());
        int palLen=fun(s,t);
        return n-palLen;
    }
};
